#!/bin/bash
# run this in the directory where everything will be built
# first param is mpir directory

DIR=$(pwd)
if [ $# -eq 1 ] ; then 
	# get absolute directory
	REL=$(echo $1 | cut -b 1)
	if [ $REL == "/" ] ; then
	       DIR=$1
	else
	       DIR=$(pwd)/$1
	fi
fi

# dont want to run yacc
touch $DIR/demos/calc/*.c $DIR/demos/calc/*.h

SYSNAME=$(uname -n)
if [ -e $SYSNAME ] ; then echo "ERROR directory $SYSNAME allready exist" ; exit 1 ; fi

CPUS=1
COMP="gcc"
if [ -f /proc/cpuinfo ] ; then
	CPUS=$(cat /proc/cpuinfo  | grep -ce processor)
fi
if [ $SYSNAME == "mark" ] ; then
	CPUS=2
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "mark2" ] ; then
	CPUS=2
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "varro" ] ; then
	CPUS=2
	COMP="gcc gcc-3.3"
fi
if [ $SYSNAME == "cleo" ] ; then
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "iras" ] ; then
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "cicero" ] ; then
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "menas" ] ; then
	COMP="gcc gcc-4.3.3"
fi
if [ $SYSNAME == "fulvia" ] ; then
	CPUS=4
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "eno" ] ; then
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "modular" ] ; then
	COMP="gcc gcc-3.4"
fi
# cato=sca-m0n8.scsystem sage cuda1?
echo "Using $CPUS cpus"

FAT=0
SYS=$($DIR/configfsf.guess | cut -f 1 -d -)
if [ $SYS == "x86_64" ] ; then FAT=1 ; fi
if [ $SYS == "x86" ] ; then FAT=1 ; fi

function build {
echo -e "\n\n\nTrying $1 $2\n\n\n"
mkdir $SYSNAME && cd $SYSNAME && export CC=$1 && $DIR/configure $2 && make -j $CPUS && make -j $CPUS check && cd .. && rm -rf $SYSNAME
if [ $? -ne 0 ] ; then echo "FAILED with options $1 $2" ; exit 1 ; fi
}

for C in $COMP
do
	# standard build
	build $C ""
	# all features
	build $C "--enable-cxx --enable-gmpcompat"
	# all features and debug
	build $C "--enable-cxx --enable-gmpcompat --enable-assert --enable-alloca=debug"
	# maximum debug
	build $C "--enable-cxx --enable-gmpcompat --enable-assert --enable-alloca=debug --build=none"
	if [ $FAT -eq 1 ] ; then
		# standard build
		build $C "--enable-fat"
		# all features
		build $C "--enable-fat --enable-cxx --enable-gmpcompat"
		# all features and debug
		build $C "--enable-fat --enable-cxx --enable-gmpcompat --enable-assert --enable-alloca=debug"
	fi
done

# try build try 
