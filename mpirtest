#!/bin/bash
# run this in the directory where everything will be built
# first param is mpir directory

HACK="echo 0"
TLD=""
DIR=$(pwd)
if [ $# -eq 1 ] ; then 
	# get absolute directory
	REL=$(echo $1 | cut -b 1)
	if [ $REL == "/" ] ; then
	       DIR=$1
	else
	       DIR=$(pwd)/$1
	fi
fi

# dont want to run yacc
touch $DIR/demos/calc/*.c $DIR/demos/calc/*.h

SYSNAME=$(uname -n)
if [ -e $SYSNAME ] ; then echo "ERROR directory $SYSNAME allready exist" ; exit 1 ; fi

CPUS=1
COMP="gcc"
if [ -f /proc/cpuinfo ] ; then
	CPUS=$(cat /proc/cpuinfo  | grep -ce ^processor)
fi
if [ $SYSNAME == "mark" ] ; then
	CPUS=2
	COMP="gcc gcc-4.3.3 cc"
	TCFLAGS=-O1
	TCXXFLAGS=-O1
	# only really need the flags for cc
fi
if [ $SYSNAME == "mark2" ] ; then
	CPUS=2
	COMP="gcc gcc-4.3.3 cc"
	TCFLAGS=-O1
	TCXXFLAGS=-O1
fi
if [ $SYSNAME == "t2" ] ; then
	CPUS=8
	COMP="gcc cc"
	LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/sparc-solaris-toolchain/lib/sparcv9
        TLD=/usr/ccs/bin/sparcv9/ld
fi
if [ $SYSNAME == "varro" ] ; then
	CPUS=2
	COMP="gcc gcc-3.3"
fi
if [ $SYSNAME == "cleo" ] ; then
	COMP="gcc gcc-4.3.3"
	#LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/intel-11.0.081/ia64-Linux-rhel/lib/ia64
	#export LD_LIBRARY_PATH  dont know is we need this now
	# cc=gcc-4.1.2 is broken on ia64
	# icc is broken for the moment
fi
if [ $SYSNAME == "iras" ] ; then
	COMP="gcc gcc-4.3.3"
	# cc=gcc-4.1.2 is broken on ia64
fi
if [ $SYSNAME == "cicero" ] ; then
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "menas" ] ; then
	COMP="gcc gcc-4.3.3"
fi
if [ $SYSNAME == "fulvia" ] ; then
	CPUS=4
	COMP="gcc gcc-4.3.3 cc"
	HACK="echo -e \"check:\n\techo skip yasm check\n\" > yasm/Makefile"
	TCFLAGS=-m64
	TCXXFLAGS=-m64
fi
if [ $SYSNAME == "eno" ] ; then
	COMP="gcc gcc-4.3.3 cc"
fi
if [ $SYSNAME == "modular" ] ; then
	COMP="gcc"
	# gcc-3.4 is broken on modular , has no g++
fi
echo "Using $CPUS cpus"

FAT=0
SYS=$($DIR/configfsf.guess | cut -f 1 -d -)
if [ $SYS == "x86_64" ] ; then FAT=1 ; fi
if [ $SYS == "x86" ] ; then FAT=1 ; fi
SYS=none-$($DIR/config.guess | cut -f 2- -d -)

function build {
echo -e "\n\n\nTrying $1 $2 $3\n\n\n"
mkdir $SYSNAME && cd $SYSNAME && export CC=$1 && export CXX=$2 && $DIR/configure $3 && make -j $CPUS && /bin/bash -c "$HACK" && \
	make -j $CPUS check && cd .. && rm -rf $SYSNAME
if [ $? -ne 0 ] ; then echo "FAILED with options $1 $2 $3" ; exit 1 ; fi
}

for C in $COMP
do
	CX=$(echo $C | sed s/cc/c++/ | sed s/gc++/g++/ | sed s/ic++/icpc/)
	if [ $(uname) == "SunOS" ] ; then
		CX=$(echo $CX | sed s/c++/CC/)
	fi
	if [ $C == "cc" ] ; then
		if [ -n $TLD ] ; then
			export LD=$TLD
		fi
		# it would be nice if we set this back on exit
	fi
	# standard build
	build $C $CX ""
	# all features
	build $C $CX "--enable-cxx --enable-gmpcompat"
	# all features and debug
	build $C $CX "--enable-cxx --enable-gmpcompat --enable-assert --enable-alloca=debug"
	# maximum debug
	export CFLAGS=$TCFLAGS
	export CXXFLAGS=$TCXXFLAGS
	build $C $CX "--enable-cxx --enable-gmpcompat --enable-assert --enable-alloca=debug --build=$SYS"
	unset CFLAGS
	unset CXXFLAGS
	if [ $FAT -eq 1 ] ; then
		# standard build
		build $C $CX "--enable-fat"
		# all features
		build $C $CX "--enable-fat --enable-cxx --enable-gmpcompat"
		# all features and debug
		build $C $CX "--enable-fat --enable-cxx --enable-gmpcompat --enable-assert --enable-alloca=debug"
	fi
done

# try build try 
